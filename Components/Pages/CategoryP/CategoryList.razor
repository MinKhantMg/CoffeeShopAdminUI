@page "/category"

@using Microsoft.AspNetCore.Authorization
@using CoffeeShopAdmin.Models.CategoryM

@inject CoffeeShopAdmin.Services.CategoryS.ICategoryService CategoryService

@attribute [Authorize]

<PageTitle>Category List</PageTitle>
<h1>Categories</h1>
<hr />
<NavLink href="/category/create" class="btn btn-success mb-4">New</NavLink>

@if (categories is not null)
{
    <table class="table table-bordered">
        <thead class="table-dark">
            <tr>
                <th scope="col">#</th>
                <th scope="col">Name</th>
                <th scope="col">CreatedBy</th>
                <th scope="col">CreatedOn</th>
                <th scope="col">LastModifiedBy</th>
                <th scope="col">LastModifiedOn</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in pagedCategories)
            {
                <tr class="table-row">
                    <td style="width : 150px">
                        <NavLink href="@($"/category/update/{item.Id}")" class="btn btn-primary">Edit</NavLink>
                        <NavLink href="@($"/category/delete/{item.Id}")" class="btn btn-danger">Delete</NavLink>
                    </td>
                    <td>@item.Name</td>
                    <td>@item.CreatedBy</td>
                    <td>@item.CreatedOn?.ToString("dd/MM/yyyy")</td>
                    <td>@item.LastModifiedBy</td>
                    <td>@item.LastModifiedOn?.ToString("dd/MM/yyyy")</td>
                </tr>
            }

            <!-- Fill empty rows if less than 5 items are present -->
            @for (int i = pagedCategories.Count; i < pageSize; i++)
            {
                <tr class="table-row">
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
            }
        </tbody>
    </table>

   
    <div class="d-flex justify-content-between mt-2">
        <button class="btn btn-secondary" @onclick="PrevPage" disabled="@(!HasPreviousPage)">Previous</button>
        <span>Page @(pageNumber + 1) of @TotalPages</span>
        <button class="btn btn-secondary" @onclick="NextPage" disabled="@(!HasNextPage)">Next</button>
    </div>


    <style>
        .table-row {
            height: 50px; 
        }
    </style>

}

@code {
    private int pageSize = 5; 
    private int pageNumber = 0;

    private List<CategoryRequestModel> categories = new(); 
    private List<CategoryRequestModel> pagedCategories = new(); 

    private int TotalPages => (int)Math.Ceiling((double)categories.Count / pageSize);
    private bool HasPreviousPage => pageNumber > 0;
    private bool HasNextPage => pageNumber < (TotalPages - 1);

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        // Fetch full category list
        categories = await CategoryService.GetCategories();
        UpdatePagedCategories();
    }

    private void UpdatePagedCategories()
    {
        pagedCategories = categories
            .Skip(pageNumber * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void NextPage()
    {
        if (HasNextPage)
        {
            pageNumber++;
            UpdatePagedCategories();
        }
    }

    private void PrevPage()
    {
        if (HasPreviousPage)
        {
            pageNumber--;
            UpdatePagedCategories();
        }
    }

}

