@page "/category/update/{Id}"

@using Microsoft.AspNetCore.Authorization
@using CoffeeShopAdmin.Models.CategoryM

@inject CoffeeShopAdmin.Services.CategoryS.ICategoryService CategoryService
@inject NavigationManager Navigation

@attribute [Authorize]

<h3>Update Category</h3>

@if (category == null )
{
	<p>Loading...</p>
}
else
{
	@if (showSuccessMessage)
	{
		<div class="alert alert-success mt-3">
			Category updated successfully!
		</div>
	}

	<EditForm Model="category" OnValidSubmit="UpdateCategory">
    <DataAnnotationsValidator />

    <div class="card w-25">
        <div class="card-body">
            <div class="mb-3">
                <label class="form-label">Category Name</label>
                <InputText class="form-control" @bind-Value="category.Name" />
                <ValidationMessage For="@(() => category.Name)" />
            </div>

            <button class="btn btn-success" type="submit">Save</button>
            <button class="btn btn-secondary" type="button" @onclick="Cancel">Cancel</button>
        </div>
    </div>
</EditForm>
}

@code {
	[Parameter] public string Id { get; set; } 
	private CategoryRequestModel category ;
	private bool showSuccessMessage = false;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			category = await CategoryService.GetCategoryById(Id);
			if (category == null)
			{
				Console.WriteLine("Category not found.");
				Navigation.NavigateTo("/category");
			}
			else{
				StateHasChanged();
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error fetching category: {ex.Message}");
		}
	}

	private async Task UpdateCategory()
	{
		if (!string.IsNullOrWhiteSpace(category.Name))
		{
			try
			{
				var result = await CategoryService.UpdateCategory(Id, category);
				if (result)
				{
					showSuccessMessage = true;
					StateHasChanged();
					await Task.Delay(1000);
					Navigation.NavigateTo("/category");
				}
				else
				{
					Console.WriteLine("Error updating category");
				}
			}
			catch (Exception ex)
			{
				Console.WriteLine($"Exception: {ex.Message}");
			}
		}
	}

	private void Cancel()
	{
		Navigation.NavigateTo("/category");
	}
}
