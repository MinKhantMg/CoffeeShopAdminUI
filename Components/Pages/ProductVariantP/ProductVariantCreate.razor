@page "/productvariant/create"

@using CoffeeShopAdmin.Models.ProductM
@using CoffeeShopAdmin.Models.ProductVariantM
@using Microsoft.AspNetCore.Authorization

@inject CoffeeShopAdmin.Services.ProductS.IProductService ProductService
@inject CoffeeShopAdmin.Services.ProductVariantS.IProductVariantService ProductVariantService
@inject NavigationManager Navigation
@inject IWebHostEnvironment WebHostEnvironment

@attribute [Authorize]

<h3>Create ProductVariant</h3>

@if (showSuccessMessage)
{
    <div class="alert alert-success mt-3">
        ProductVariant created successfully!
    </div>
}

<div class="card w-25">
    <div class="card-body">
        <EditForm Model="productvariant" OnValidSubmit="CreateProductVariant">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label class="form-label">Product Name</label>
                <InputSelect class="form-select" @bind-Value="productvariant.ProductId">
                    <option value="">Select a Product</option>
                    @foreach (var Product in Products)
                    {
                        <option value="@Product.Id">@Product.Name</option>
                    }
                </InputSelect>
               <ValidationMessage For="() => productvariant.ProductId" />
            </div>

            <div class="mb-3">
                <label class="form-label">ProductVariant Name</label>
                <InputText class="form-control" @bind-Value="productvariant.Name" />
               <ValidationMessage For="() => productvariant.Name" />
            </div>

            <div class="mb-3">
                <label class="form-label">Description</label>
                <InputTextArea class="form-control" @bind-Value="productvariant.Description" />
                <ValidationMessage For="() => productvariant.Description" />
            </div>

            <div class="mb-3">
                <label class="form-label">Price</label>
                <InputNumber class="form-control" @bind-Value="productvariant.Price" min="0" step="0.01" @oninput="PreventNegativePrice" />
                <ValidationMessage For="() => productvariant.Price" />
            </div>

            <div class="mb-3">
                <label class="form-label">Image</label>
                <InputFile OnChange="HandleFileSelected" />
                <ValidationMessage For="() => productvariant.ImageUrl" />
            </div>

            <button class="btn btn-success" type="submit">Save</button>
            <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
        </EditForm>
    </div>
</div>

@code {
    private ProductVariantRequestModel productvariant = new();
    private List<ProductRequestModel> Products = new List<ProductRequestModel>();
    private bool showSuccessMessage = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Products = await ProductService.GetProducts();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching products: {ex.Message}");
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var fileName = Path.GetFileName(file.Name); // Keep original name like "latte.png"
        var uploadsFolder = Path.Combine(WebHostEnvironment.WebRootPath, "uploads");

        // Ensure the uploads directory exists
        Directory.CreateDirectory(uploadsFolder);

        var savePath = Path.Combine(uploadsFolder, fileName);

        // Save the file (overwrite if exists)
        using var fs = new FileStream(savePath, FileMode.Create);
        await file.OpenReadStream().CopyToAsync(fs);

        // Save just the filename in the model
        productvariant.ImageUrl = fileName;

    }

    private void PreventNegativePrice(ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value?.ToString(), out var price))
        {
            productvariant.Price = price < 0 ? 0 : price;
        }
    }

    private async Task CreateProductVariant()
    {
        if (!string.IsNullOrWhiteSpace(productvariant.Name) && productvariant.ProductId is not null)
        {
            try
            {
                var result = await ProductVariantService.CreateProductVariant(productvariant);
                if (result)
                {
                    showSuccessMessage = true;
                    StateHasChanged();
                    await Task.Delay(1000);
                    Navigation.NavigateTo("/productvariant");
                }
                else
                {
                    Console.WriteLine("Error creating productvariant");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception: {ex.Message}");
            }
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/productvariant");
    }
}
