@page "/productvariant"

@using Microsoft.AspNetCore.Authorization
@using CoffeeShopAdmin.Models.ProductM
@using CoffeeShopAdmin.Models.ProductVariantM

@inject CoffeeShopAdmin.Services.ProductS.IProductService ProductService
@inject CoffeeShopAdmin.Services.ProductVariantS.IProductVariantService ProductVariantService

@attribute [Authorize]

<PageTitle>ProductVariant List</PageTitle>
<h1>ProductVariants</h1>
<hr />
<NavLink href="/productvariant/create" class="btn btn-success mb-4">New</NavLink>

@if (productvariants == null || productvariants.Count == 0)
{
	<p>No product variants found.</p>
}
else 
{
	<table class="table table-bordered">
		<thead class="table-dark">
			<tr>
				<th scope="col">#</th>
				<th scope="col">Product</th>
				<th scope="col">Name</th>
				<th scope="col">Calorie</th>
				<th scope="col">Price</th>
				<th scope="col">CreatedBy</th>
				<th scope="col">CreatedOn</th>
				<th scope="col">LastModifiedBy</th>
				<th scope="col">LastModifiedOn</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in pagedProductVariants)
			{
				<tr class="table-row">
					<td style="width : 150px">
						<NavLink href="@($"/productvariant/update/{item.Id}")" class="btn btn-primary">Edit</NavLink>
						<NavLink href="@($"/productvariant/delete/{item.Id}")" class="btn btn-danger">Delete</NavLink>
					</td>
					<td>@GetProductName(item.ProductId)</td>
					<td>@item.Name</td>
					<td>@item.Calorie</td>
					<td>@item.Price</td>
					<td>@item.CreatedBy</td>
					<td>@item.CreatedOn?.ToString("dd/MM/yyyy")</td>
					<td>@item.LastModifiedBy</td>
					<td>@item.LastModifiedOn?.ToString("dd/MM/yyyy")</td>
				</tr>
			}

			<!-- Fill empty rows if less than 5 items are present -->
			@for (int i = pagedProductVariants.Count; i < pageSize; i++)
			{
				<tr class="table-row">
					<td>&nbsp;</td>
					<td>&nbsp;</td>
					<td>&nbsp;</td>
					<td>&nbsp;</td>
					<td>&nbsp;</td>
					<td>&nbsp;</td>
					<td>&nbsp;</td>
				</tr>
			}
		</tbody>
	</table>

	<div class="d-flex justify-content-between mt-2">
		<button class="btn btn-secondary" @onclick="PrevPage" disabled="@(!HasPreviousPage)">Previous</button>
		<span>Page @(pageNumber + 1) of @TotalPages</span>
		<button class="btn btn-secondary" @onclick="NextPage" disabled="@(!HasNextPage)">Next</button>
	</div>

	<style>
		.table-row {
			height: 50px;
		}
	</style>
}

@code {
	private int pageSize = 5;
	private int pageNumber = 0;

	private List<ProductVariantRequestModel> productvariants = new();
	private List<ProductVariantRequestModel> pagedProductVariants = new();
	private Dictionary<string, string> productNames = new();

	private int TotalPages => (int)Math.Ceiling((double)productvariants.Count / pageSize);
	private bool HasPreviousPage => pageNumber > 0;
	private bool HasNextPage => pageNumber < (TotalPages - 1);

	protected override async Task OnInitializedAsync()
	{
		await LoadCategories();
	}

	private async Task LoadCategories()
	{
		try
		{
			productvariants = await ProductVariantService.GetProductVariants();

			var products = await ProductService.GetProducts();

			productNames = products
				.Where(p => !string.IsNullOrEmpty(p.Id))
				.ToDictionary(c => c.Id, c => c.Name);

			UpdatePagedProductVariants();
		}
		catch (Exception ex)
		{
			Console.WriteLine($"[ERROR] Failed to load data: {ex.Message}");
		}
	}

	private void UpdatePagedProductVariants()
	{
		pagedProductVariants = productvariants
			.Skip(pageNumber * pageSize)
			.Take(pageSize)
			.ToList();
	}

	private string GetProductName(string productId) // Accepts string now
	{
		if (string.IsNullOrWhiteSpace(productId)) return "Unknown";

		return productNames.TryGetValue(productId, out var name) ? name : "Unknown";
	}

	private void NextPage()
	{
		if (HasNextPage)
		{
			pageNumber++;
			UpdatePagedProductVariants();
		}
	}

	private void PrevPage()
	{
		if (HasPreviousPage)
		{
			pageNumber--;
			UpdatePagedProductVariants();
		}
	}
}
