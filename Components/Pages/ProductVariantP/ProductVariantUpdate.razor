@page "/productvariant/update/{Id}"

@using CoffeeShopAdmin.Models.ProductM
@using CoffeeShopAdmin.Models.ProductVariantM
@using Microsoft.AspNetCore.Authorization

@inject CoffeeShopAdmin.Services.ProductS.IProductService ProductService
@inject CoffeeShopAdmin.Services.ProductVariantS.IProductVariantService ProductVariantService
@inject NavigationManager Navigation
@inject IWebHostEnvironment WebHostEnvironment

@attribute [Authorize]

<h3>Update ProductVariant</h3>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (productvariant == null)
{
    <p>ProductVariant not found.</p>
}
else
{
     @if (showSuccessMessage)
    {
        <div class="alert alert-success mt-3">
            ProductVariant updated successfully!
        </div>
    }

    <EditForm Model="productvariant" OnValidSubmit="UpdateProductVariant">
        <DataAnnotationsValidator />
        <div class="card w-25">
            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label">Product Name</label>
                    <InputSelect @bind-Value="productvariant.ProductId" class="form-select">
                        <option value="">Select a Product</option>
                        @if (Products != null)
                        {
                            @foreach (var Product in Products)
                            {
                                <option value="@Product.Id">@Product.Name</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="() => productvariant.ProductId" />
                </div>

                <div class="mb-3">
                    <label class="form-label">ProductVariant Name</label>
                    <InputText @bind-Value="productvariant.Name" class="form-control" />
                    <ValidationMessage For="() => productvariant.Name" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Calories</label>
                    <InputNumber class="form-control" @bind-Value="productvariant.Calorie" min="0" step="1" @oninput="PreventNegativeCalorie" />
                    <ValidationMessage For="() => productvariant.Calorie" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Description</label>
                    <InputTextArea class="form-control" @bind-Value="productvariant.Description" />
                    <ValidationMessage For="() => productvariant.Description" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Price</label>
                    <InputNumber class="form-control" @bind-Value="productvariant.Price" min="0" step="0.01" />
                    <ValidationMessage For="() => productvariant.Price" />
                </div>

                @* <div class="mb-3"> *@
                @*     <label class="form-label">Image</label> *@
                @*     <InputFile OnChange="HandleFileSelected" /> *@
                @*     <ValidationMessage For="() => productvariant.ImageUrl" /> *@
                @* </div> *@

                <button type="submit" class="btn btn-success">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter] public string Id { get; set; } = string.Empty;
    private ProductVariantRequestModel productvariant = new();
    private List<ProductRequestModel> Products = new();
    private bool isLoading = true;
    private bool showSuccessMessage = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var productVariantTask = ProductVariantService.GetProducVariantById(Id);
            var productTask = ProductService.GetProducts();
            
            await Task.WhenAll(productVariantTask, productTask);

            productvariant = await productVariantTask;
            Products = await productTask;

            if (productvariant == null)
            {
                Navigation.NavigateTo("/productvariant");
                return;
            }

            isLoading = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var fileName = Path.GetFileName(file.Name); // Keep original name like "latte.png"
        var uploadsFolder = Path.Combine(WebHostEnvironment.WebRootPath, "uploads");

        // Ensure the uploads directory exists
        Directory.CreateDirectory(uploadsFolder);

        var savePath = Path.Combine(uploadsFolder, fileName);

        // Save the file (overwrite if exists)
        using var fs = new FileStream(savePath, FileMode.Create);
        await file.OpenReadStream().CopyToAsync(fs);

        // Save just the filename in the model
        productvariant.ImageUrl = fileName;

    }

    private async Task UpdateProductVariant()
    {
        try
        {
            var result = await ProductVariantService.UpdateProductVariant(Id, productvariant);
            if (result)
            {
                showSuccessMessage = true;
                StateHasChanged();
                await Task.Delay(1000);
                Navigation.NavigateTo("/productvariant");
            }
            else
            {
                Console.WriteLine("Error updating productvariant");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/productvariant");
    }

    private void PreventNegativeCalorie(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var calorie))
        {
            productvariant.Calorie = calorie < 0 ? 0 : calorie;
        }
    }
}