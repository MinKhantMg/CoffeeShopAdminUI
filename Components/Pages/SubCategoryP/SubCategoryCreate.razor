@page "/subcategory/create"

@using CoffeeShopAdmin.Models.CategoryM
@using CoffeeShopAdmin.Models.SubCategoryM
@using Microsoft.AspNetCore.Authorization

@inject CoffeeShopAdmin.Services.SubCategoryS.ISubCategoryService SubCategoryService
@inject CoffeeShopAdmin.Services.CategoryS.ICategoryService CategoryService
@inject NavigationManager Navigation

@attribute [Authorize]

<h3>Create SubCategory</h3>

@if (showSuccessMessage)
{
	<div class="alert alert-success mt-3">
		SubCategory created successfully!
	</div>
}

<EditForm Model="subcategory" OnValidSubmit="CreateSubCategory">
	<DataAnnotationsValidator />
	<div class="card w-25">
		<div class="card-body">
			<div class="mb-3">
				<label class="form-label">Category Name</label>
				<InputSelect class="form-select" @bind-Value="subcategory.CategoryId">
					<option value="">Select a Category</option>
					@foreach (var category in categories)
					{
						<option value="@category.Id">@category.Name</option>
					}
				</InputSelect>
				<ValidationMessage For="() => subcategory.CategoryId" />
			</div>

			<div class="mb-3">
				<label class="form-label">SubCategory Name</label>
				<InputText class="form-control" @bind-Value="subcategory.Name" />
				<ValidationMessage For="() => subcategory.Name" />
			</div>

			<button class="btn btn-success" type="submit">Save</button>
			<button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
		</div>
	</div>
</EditForm>

@code {
	private SubCategoryRequestModel subcategory = new();
	private List<CategoryRequestModel> categories = new List<CategoryRequestModel>();
	private bool showSuccessMessage = false;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			categories = await CategoryService.GetCategories();
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error fetching categories: {ex.Message}");
		}
	}

	private async Task CreateSubCategory()
	{
		if (!string.IsNullOrWhiteSpace(subcategory.Name) && subcategory.CategoryId is not null)
		{
			try
			{
				var result = await SubCategoryService.CreateSubCategory(subcategory);
				if (result)
				{
					showSuccessMessage = true;
					StateHasChanged();
					await Task.Delay(1000);
					Navigation.NavigateTo("/subcategory");
				}
				else
				{
					Console.WriteLine("Error creating subcategory");
				}
			}
			catch (Exception ex)
			{
				Console.WriteLine($"Exception: {ex.Message}");
			}
		}
	}

	private void Cancel()
	{
		Navigation.NavigateTo("/subcategory");
	}
}
