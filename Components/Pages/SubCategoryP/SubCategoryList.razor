@page "/subcategory"

@using Microsoft.AspNetCore.Authorization
@using CoffeeShopAdmin.Models.SubCategoryM
@using CoffeeShopAdmin.Models.CategoryM

@inject CoffeeShopAdmin.Services.SubCategoryS.ISubCategoryService SubCategoryService
@inject CoffeeShopAdmin.Services.CategoryS.ICategoryService CategoryService

@attribute [Authorize]

<PageTitle>SubCategory List</PageTitle>
<h1>SubCategories</h1>
<hr />
<NavLink href="/subcategory/create" class="btn btn-success mb-4">New</NavLink>

@if (subcategories is not null)
{
    <table class="table table-bordered">
        <thead class="table-dark">
            <tr>
                <th scope="col">#</th>
                <th scope="col">Category</th>
                <th scope="col">Name</th>
                <th scope="col">CreatedBy</th>
                <th scope="col">CreatedOn</th>
                <th scope="col">LastModifiedBy</th>
                <th scope="col">LastModifiedOn</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in pagedSubCategories)
            {
                <tr class="table-row">
                    <td style ="width : 150px">
                        <NavLink href="@($"/subcategory/update/{item.Id}")" class="btn btn-primary">Edit</NavLink>
                        <NavLink href="@($"/subcategory/delete/{item.Id}")" class="btn btn-danger">Delete</NavLink>
                    </td>
                    <td>@GetCategoryName(item.CategoryId)</td>
                    <td>@item.Name</td>
                    <td>@item.CreatedBy</td>
                    <td>@item.CreatedOn?.ToString("dd/MM/yyyy")</td>
                    <td>@item.LastModifiedBy</td>
                    <td>@item.LastModifiedOn?.ToString("dd/MM/yyyy")</td>
                </tr>
            }

            <!-- Fill empty rows if less than 5 items are present -->
            @for (int i = pagedSubCategories.Count; i < pageSize; i++)
            {
                <tr class="table-row">
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-between mt-2">
        <button class="btn btn-secondary" @onclick="PrevPage" disabled="@(!HasPreviousPage)">Previous</button>
        <span>Page @(pageNumber + 1) of @TotalPages</span>
        <button class="btn btn-secondary" @onclick="NextPage" disabled="@(!HasNextPage)">Next</button>
    </div>

    <style>
        .table-row {
            height: 50px;
        }
    </style>
}

@code {
    private int pageSize = 5;
    private int pageNumber = 0;

    private List<SubCategoryRequestModel> subcategories = new();
    private List<SubCategoryRequestModel> pagedSubCategories = new();
    private Dictionary<string, string> categoryNames = new();

    private int TotalPages => (int)Math.Ceiling((double)subcategories.Count / pageSize);
    private bool HasPreviousPage => pageNumber > 0;
    private bool HasNextPage => pageNumber < (TotalPages - 1);

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        subcategories = await SubCategoryService.GetSubCategories();

        // Fetch all categories
        var categories = await CategoryService.GetCategories();

        // Populate dictionary for quick lookup, using string keys
        categoryNames = categories.ToDictionary(c => c.Id, c => c.Name);

        UpdatePagedSubCategories();
    }

    private void UpdatePagedSubCategories()
    {
        pagedSubCategories = subcategories
            .Skip(pageNumber * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private string GetCategoryName(string categoryId) // Accepts string now
    {
        return categoryNames.TryGetValue(categoryId, out var name) ? name : "Unknown";
    }

    private void NextPage()
    {
        if (HasNextPage)
        {
            pageNumber++;
            UpdatePagedSubCategories();
        }
    }

    private void PrevPage()
    {
        if (HasPreviousPage)
        {
            pageNumber--;
            UpdatePagedSubCategories();
        }
    }
}
