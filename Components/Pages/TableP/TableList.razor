@page "/table"

@using Microsoft.AspNetCore.Authorization
@using CoffeeShopAdmin.Models.TableM

@inject CoffeeShopAdmin.Services.TableS.ITableService TableService

@attribute [Authorize]

<PageTitle>Table List</PageTitle>
<h1>Table</h1>
<NavLink href="/table/create" class="btn btn-success mb-2">New</NavLink>

@if (tables is not null)
{
    <table class="table table-bordered">
        <thead class="table-dark">
            <tr>
                <th scope="col">#</th>
                <th scope="col">Name</th>
                <th scope="col">CreatedBy</th>
                <th scope="col">CreatedOn</th>
                <th scope="col">LastModifiedBy</th>
                <th scope="col">LastModifiedOn</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in pagedTables)
            {
                <tr class="table-row">
                    <td>
                        <NavLink href="@($"/table/update/{item.Id}")" class="btn btn-primary">Edit</NavLink>
                        <NavLink href="@($"/table/delete/{item.Id}")" class="btn btn-danger">Delete</NavLink>
                    </td>
                    <td>@item.Name</td>
                    <td>@item.CreatedBy</td>
                    <td>@item.CreatedOn</td>
                    <td>@item.LastModifiedBy</td>
                    <td>@item.LastModifiedOn</td>
                </tr>
            }

            <!-- Fill empty rows if less than 5 items are present -->
            @for (int i = pagedTables.Count; i < pageSize; i++)
            {
                <tr class="table-row">
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
            }
        </tbody>
    </table>


    <div class="d-flex justify-content-between mt-2">
        <button class="btn btn-secondary" @onclick="PrevPage" disabled="@(!HasPreviousPage)">Previous</button>
        <span>Page @(pageNumber + 1) of @TotalPages</span>
        <button class="btn btn-secondary" @onclick="NextPage" disabled="@(!HasNextPage)">Next</button>
    </div>


    <style>
        .table-row {
            height: 50px;
        }
    </style>

}

@code {
    private int pageSize = 5;
    private int pageNumber = 0;

    private List<TableRequestModel> tables = new();
    private List<TableRequestModel> pagedTables = new();

    private int TotalPages => (int)Math.Ceiling((double)tables.Count / pageSize);
    private bool HasPreviousPage => pageNumber > 0;
    private bool HasNextPage => pageNumber < (TotalPages - 1);

    protected override async Task OnInitializedAsync()
    {
        await LoadTables();
    }

    private async Task LoadTables()
    {
        tables = await TableService.GetTables();
        UpdatePagedTables();
    }

    private void UpdatePagedTables()
    {
        pagedTables = tables
            .Skip(pageNumber * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void NextPage()
    {
        if (HasNextPage)
        {
            pageNumber++;
            UpdatePagedTables();
        }
    }

    private void PrevPage()
    {
        if (HasPreviousPage)
        {
            pageNumber--;
            UpdatePagedTables();
        }
    }

}

